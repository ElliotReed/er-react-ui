@use "../base/typography";
@use "variables";
@use "colors";
@use 'functions';

// mixins
@mixin appFixedContainer {
  display: grid;
  grid-template-rows: auto minmax(0, 1fr) auto;
  grid-template-columns: 1fr;
  width: 100vw;
  min-height: 100vh;
  max-height: 100vh;
  overflow: hidden;

  @include respondTo(tablet) {
    grid-template-columns: 1fr 1.618fr;
  }

}

// @mixin backgroundImage($size: 100%, $left: 0, $bottom: 0) {
//   &::before {
//     z-index: -1;
//     content: "";

//     position: absolute;
//     top: 0;
//     right: 0;
//     bottom: 0;
//     left: 0;
//     opacity: 1;
//     // background: url(/components/common/Background/tree_2c.svg) no-repeat fixed;
//     background-size: $size;
//     // background-size: cover;
//     // background-clip: padding-box;
//     background-position: left $left bottom $bottom;
//     background-blend-mode: color-dodge;
//     // filter: blur(0.12rem);
//   }
// }

@mixin borderRadius() {
  border-radius: 1rem * variables.$goldenRatioDecrease * variables.$goldenRatioDecrease * variables.$goldenRatioDecrease;
}

@mixin border($color: transparent, $width: 1px, $style: solid) {
  border-width: $width;
  border-color: $color;
  border-style: $style;
  @include borderRadius;
}

@mixin borderTest() {
  border: 1px solid $errorColor;
}



@mixin flow {
  &>*+* {
    margin-block-start: variables.$spacer-md;
  }
}

@mixin focus($color: colors.get-color(gm-medium, 100)) {
  outline: thin dotted $color;
  outline-offset: 0.12em;
}

@mixin gradient($color) {
  background-image: linear-gradient(173deg,
      scale-color($color, $lightness: 10%) 0%,
      scale-color($color, $lightness: 15%) 10%,
      $color 62%,
      scale-color($color, $lightness: -15%) 90%,
      scale-color($color, $lightness: -10%) 100%);
}

@mixin input {
  padding: get-size(300) * 1em get-size(400) * 1em;
  margin: 0 0 $margin 0;
  @include border($color: $primary);
}

@mixin padding-box($size: md) {
  $padding-box-sm: .47em .76em;
  $padding-box-md: .76em 1em;
  $padding-box-lg: 1em 1.47em;

  @if $size ==sm {
    padding: $padding-box-sm;
  }

  @if $size ==md {
    padding: $padding-box-md;
  }

  @if $size ==lg {
    padding: $padding-box-lg;
  }
}

@mixin triangle($direction, $size: 6px, $color: #222) {
  /*
  * @include triangle within a pseudo element and add positioning properties (ie. top, left)
  * $direction: up, down, left, right
  */
  content: "";
  display: block;
  position: absolute;
  height: 0;
  width: 0;

  @if ($direction =="up") {
    border-bottom: $size solid $color;
    border-left: 1/2 * $size solid transparent;
    border-right: 1/2 * $size solid transparent;
  }

  @else if ($direction =="down") {
    border-top: $size solid $color;
    border-left: 1/2 * $size solid transparent;
    border-right: 1/2 * $size solid transparent;
  }

  @else if ($direction =="left") {
    border-top: 1/2 * $size solid transparent;
    border-bottom: 1/2 * $size solid transparent;
    border-right: $size solid $color;
  }

  @else if ($direction =="right") {
    border-top: 1/2 * $size solid transparent;
    border-bottom: 1/2 * $size solid transparent;
    border-left: $size solid $color;
  }
}


@mixin respondTo($media) {
  /* Example usage div {
    // regular styles here
    @include respondTo(desktop) {
      &:hover {
        background: blue;
      } // only add the hover effect on desktop browsers
    }
  }
  This can be done
  @media (min-width: $tabletPortrait) and (max-width: $tabletLandscape) {
  */

  // Breakpoints for each query
  $smartphone: functions.px-to-rem(767px);
  $tablet: functions.px-to-rem(768px);
  $tabletLandscape: functions.px-to-rem(767px);
  $tablet: functions.px-to-rem(900px);
  $desktop: functions.px-to-rem(1080px);
  $largeScreen: functions.px-to-rem(1800px);

  @if $media ==smartphone {
    @media (max-width: $smartphone) {
      @content;
    }
  }

  @else if $media ==tablet {
    @media (min-width: $tablet) {
      @content;
    }
  }

  @else if $media ==tabletLandscape {
    @media (min-width: $tabletLandscape) {
      @content;
    }
  }

  @else if $media ==desktop {
    @media (min-width: $desktop) {
      @content;
    }
  }

  @else if $media ==largeScreen {
    @media (min-width: $largeScreen) {
      @content;
    }
  }
}

@mixin enterAnimation() {
  animation: softIn variables.$duration-md ease-out;

  @keyframes softIn {
    from {
      opacity: 0;
    }

    to {
      opacity: 1;
    }
  }
}



@mixin scrollbar {
  &::-webkit-scrollbar {
    width: functions.size(400);
    // width: .47rem;
    /* Mostly for vertical scrollbars */
  }

  &::-webkit-scrollbar-thumb {
    border-radius: variables.$border-radius;
    background: variables.$scrollbar-thumb-background;
  }

  &::-webkit-scrollbar-thumb:hover {
    border: variables.$border;
    background: variables.$scrollbar-thumb-background-hover;
  }

  &::-webkit-scrollbar-track {
    // box-shadow: $box-shadow-inset;
    background: variables.$scrollbar-track-background;
  }
}

// add to the scrollable content container
.scrollabel-content {
  overflow-y: auto;
  @include scrollbar;
  padding-bottom: variables.$spacer-md;
}


// region box-shadow ==========
$box-shadow-inset: inset 0 0 functions.px-to-rem(8px) transparentize(black, .76);

/**
 * Computes a top-shadow
 *
 * @param {Number} $depth - depth level
 *
 * @return {List}
 */
@function top-shadow($depth) {
  $primary-offset: nth(1.5 3 10 14 19, $depth) * 1px;
  $blur: nth(1.5 3 10 14 19, $depth) * 4px;
  $color: rgba(black, nth(.12 .16 .19 .25 .30, $depth));

  @return 0 $primary-offset $blur $color;
}

/**
 * Computes a bottom-shadow for a card effect.
 *
 * @param {Number} $depth - depth level
 *
 * @return {List}
 */
@function bottom-shadow($depth) {
  $primary-offset: nth(1.5 3 6 10 15, $depth) * 1px;
  $blur: nth(1 3 3 5 6, $depth) * 4px;
  $color: rgba(black, nth(.24 .23 .23 .22 .22, $depth));

  @return 0 $primary-offset $blur $color;
}

/**
 * Gives a card depth effect.
 *
 * @param {Number} $depth - depth level (between 1 and 5)
 *
 * @link https://www.google.com/design/spec/layout/layout-principles.html#layout-principles-dimensionality Google Design
 *
 * @requires {function} top-shadow
 * @requires {function} bottom-shadow
 */
@mixin shadow($depth) {
  @if $depth < 1 {
    box-shadow: none;
  }

  @else if $depth >5 {
    @warn "Invalid $depth `#{$depth}` for mixin `card`.";
  }

  @else {
    box-shadow: bottom-shadow($depth), top-shadow($depth);
  }
}

// endregion box-shadow ==========

$button-background-color-default: colors.get-color(gm-light, 500);
$button-text-color-default: colors.get-color(gm-medium, 100);

@mixin button-link-common($size, $text-color, $bg-color, $shape) {
  display: inline-flex;
  justify-content: center;
  align-items: center;

  @if $size ==sm {
    $wd-ht: 42px;
    min-width: $wd-ht;
    min-height: $wd-ht;
  }

  @if $size ==md {
    $wd-ht: 60px;
    min-width: $wd-ht;
    min-height: $wd-ht;
  }

  @if $size ==lg {
    $wd-ht: 72px;
    min-width: $wd-ht;
    min-height: $wd-ht;
  }

  font-family: typography.$fontStackSans;
  font-weight: variables.$fw-md;
  color: $text-color;
  text-align: center;
  text-decoration: none;
  white-space: nowrap;
  border-radius: variables.$border-radius;
  background-color: $bg-color;
  @include padding-box;
  // cursor: if($enable-button-pointers, pointer, null);
  user-select: none;

  transition: all variables.$duration-md ease-in-out;
  cursor: pointer;
  @include shadow(1);

  // @include border(shade($bg-color, 12%));

  // background-image: linear-gradient(180deg, $bg-color 0%, tint($bg-color, 47%) 18%, $bg-color 100%);
  // box-shadow: inset 0 0 3px rgba(shade($bg-color, 18%), 18%);
  // cursor: if($enable-button-pointers, pointer, null);
  // font-size: 1rem;
  // line-height: 1.618;
  // margin: $margin;
  // margin: var(--margin) 0;
  // text-decoration: if($link-decoration == none, null, none);
  // line-height: 1.618;
  // vertical-align: middle;
  &:hover,
  &:focus {
    background: darken($bg-color, 8%);
    @include shadow(2);
  }

  &:focus {
    @include focus;
  }

  &:active {
    background: darken($bg-color, 25%);
    // @include boxShadow(get-color(base, dark));
    transform: scale(1.012);
  }

  @if $shape ==pill {
    @include pill;
  }

  @if $shape ==leaf {
    @include leaf;
  }
}

@mixin link-as-button($size: md, $bg-color: $button-background-color-default, $text-color: $button-text-color-default, $shape: default) {
  @include button-link-common($size, $text-color, $bg-color, $shape);

  &:hover {
    text-decoration: underline;

    i {
      text-decoration: none;
    }
  }
}

@mixin button($size: md, $bg-color: $button-background-color-default, $text-color: $button-text-color-default, $shape: "default") {
  @include button-link-common($size, $text-color, $bg-color, $shape);

  touch-action: manipulation;

  &:hover:disabled {
    letter-spacing: normal;
  }

  &:disabled {
    cursor: not-allowed;
    // $disabledColor: rgba($neutral, 0.47);
    // color: $disabledColor;
  }
}

@mixin pill {
  border-radius: 100vw;
}

@mixin leaf {
  border-radius: 76% 12% / 200%;
}


@mixin btnPill($bg-color: $button-background-color-default, $text-color: $button-text-color-default) {
  flex-grow: 0.25;
  // background-color: get-color("neutral");
  // @include boxShadow(get-color(base, dark));
  border-radius: 100px;
  // @include paddingBox;
  // margin: $margin;
  text-align: center;
  // transition: all $duration ease-in-out;

  &:hover {
    // box-shadow: 0 3px 5px rgba(get-color(base, dark), 0.29);
    transform: scaleX(1.03);
    // background: get-color(main, dark);
  }
}

.button {
  @include button;
}

.link-as-button {
  @include link-as-button;
}